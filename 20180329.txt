.$mount 挂在
 render 底层 h 对app进行渲染
组件能被其他页面复用
导入样式
import ‘ 路径就行’
router/ psth‘/’components /
@ 会映射为src
面包屑 组件
插槽 span 
slot 根据名字匹配
 slot class 插槽

refs 引用
快速定位节点 返回vue实例 或者dom节点
app.￥slot
isserver 服务端渲染才用 
watch 组件的方法
on 监听事件
emit 触发
once 只进行一次
app. forceupdate 组件强制重新渲染一次
let i=0
i++
先不进行赋值 然后进行调用 强制渲染
set （app.obj ‘a’i） 给某个属性设置值
delete删除
nexttick  异步渲染

nexttick 下次更新的时候调用 （callback）
vue实例 方法 属性  this 就是app  就是这个实例  48分钟

vue 声生命周期

beforecreate

mounted
undated
actived
desteoyed

mount 把东西挂在html节点上
app。$mounter('#root')
before updata 在更新的时候 有数据会有
destroy 解除watch 跟监听
actived keepalive
是啥 不知道
create 拿不到dom节点
dom 在mounted里面

mount 不会在服务端 因为没有dom
this 不一样 
init
data在created以后
render （）{
}在beforemout 在mount中间
vue实例的生命周期
rendererror（h err）{
return j（）
}
本组件时候渲染成功
errcaptured 收集线上错误  除非停止向上冒泡 要不都能拿到 可以正式环境 1.07.29

render (h err)
new vue({
el
template
三元运算符
1 ？1 ：2
{{ isactive}}
可以写简单的运算
eslint-disable -line
 p  v-html='html'
:id  v-bind v-on;click  
: class { active :!active}
:class '[]'
})
computed watch
:style ='styles'
后面样式替代前面的
appearance ; none
去除浏览器默认样式

 1 .24.56 computed
字符串的模板拼接

computed{
声明方法
name （） {
return

}
}
v-model=‘’
computed 不会重新计算
如果computed内的值不变不会进行不计算  而方法会

获取computed 
设置computed

尽量不要用computed 属性来set

watch：{
handler

}
刚开始watch不出发  watch监听数据变化

watch加handler 直接执行
deep  true
deep 遍历object 任何属性

不要在computed 跟watch 不要修改原来的属性  要不容易出错 不可以给赋值  要不就无线循环了

v-bind：id 
v-html=html
v-show  display：none
v-if 直接不放在dom里面
变dom节点会重拍重回 性能问题

v-if v-else-if

v-for
item in items
item index
（val key index） in obj
：key  dom节点服用问题  key：item.id 不要用index用key  会导致错误的缓存

@click v-on：click

input v-model 绑定

2-02 checkbox

:value='1' v-model=arr

v-model radio 只能选中一个 :value
.number 修饰符 .trim 去除首尾空格
.lazy 点开才有区别 

v-pre 不会解析 v-cloak v-once 只能触发一次

组件化开发
vue.component（‘cop’， component）
components：{

}
data （）{
return{
text
:123
}
}

不用全局对象 要不组件有影响 data 用fuction定义

props：{
active： boolean
props 属于类型检查功能
propone string
}
不应该主动修改props里面的内容

该外部组件的props
应该子组件 调用父组件的方法
this.￥emit（）change（）

2.32.51 props的相关东西
 今天晚上没学习 妈个鸡








































